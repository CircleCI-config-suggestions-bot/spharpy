# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2


executors:
  python-docker: # declares a reusable executor
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    docker:
      - image: cimg/python:<<parameters.version>>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build_and_test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest

  test_pypi_publish:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout  # checkout source code to working directory
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
      - run:
          name: deploy
          command: |  # create whl, install twine and publish to Test PyPI
            python setup.py sdist bdist_wheel
            sudo pip install pipenv
            pipenv install twine
            pipenv run twine upload --repository testpypi dist/*

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build_and_test:
          matrix:
            parameters:
              version:
                - "3.7"
                - "3.8"
                - "3.9"
  test_and_publish: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build_and_test:
          matrix:
            parameters:
              version:
                - "3.7"
                - "3.8"
                - "3.9"
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - test_pypi_publish:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
